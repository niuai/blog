(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{407:function(e,r,t){"use strict";t.r(r);var o=t(45),s=Object(o.a)({},(function(){var e=this,r=e.$createElement,t=e._self._c||r;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"minikube-部署应用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#minikube-部署应用"}},[e._v("#")]),e._v(" Minikube 部署应用")]),e._v(" "),t("blockquote",[t("p",[e._v("参考文档："),t("a",{attrs:{href:"https://minikube.sigs.k8s.io/docs/handbook/registry/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Minikube Registries"),t("OutboundLink")],1)])]),e._v(" "),t("h2",{attrs:{id:"docker-环境"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-环境"}},[e._v("#")]),e._v(" Docker 环境")]),e._v(" "),t("p",[e._v("首先需要明确的是，Minikube 的 Docker 环境是独立的，即如果本地还安装了 Docker Desktop for Windows，那么该 Docker 环境与 Minikube 的 Docker 环境是分开的，并不能互相引用。")]),e._v(" "),t("p",[e._v("平时默认打开的是 Docker for Windows 的环境，如果想打开 Minikube 的 Docker 环境，需要以管理员权限运行 "),t("code",[e._v("& minikube -p minikube docker-env | Invoke-Expression")]),e._v("（该命令可以通过运行 "),t("code",[e._v("minikube docker-env")]),e._v(" 得到），即在该命令窗口中进入了 Minikube 的 Docker 环境，在该环境下 build 的镜像可以被 Minikube（kubectl） 引用。")]),e._v(" "),t("h2",{attrs:{id:"创建基于-minikube-的-registry"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建基于-minikube-的-registry"}},[e._v("#")]),e._v(" 创建基于 Minikube 的 registry")]),e._v(" "),t("p",[e._v("如果平时想在 Docker for Windows 下构建镜像，且部署于 Minikube 的环境，则可以在 Minikube 下搭建私有的 registry，再将 Docker for Windows 下构建的镜像推送上去（也可以在 Docker for Windows 下搭建 registry，Minikube 去拉取镜像部署）。")]),e._v(" "),t("p",[e._v("以管理员运行 "),t("code",[e._v("minikube addons enable registry")]),e._v("，Minikube 会自动去拉取镜像并搭建 registry。之后，需要运行 "),t("code",[e._v("kubectl get pod -n kube-system")]),e._v(" 来找到运行中的 registry pod（比如："),t("em",[e._v("registry-dx8jf")]),e._v("），再运行 "),t("code",[e._v("kubectl port-forward --namespace kube-system registry-dx8jf 5000:5000")]),e._v(" 来将 registry 的端口映射到 Host 机器上。此时访问 "),t("a",{attrs:{href:"http://localhost:5000/v2/_catalog",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://localhost:5000/v2/_catalog"),t("OutboundLink")],1),e._v(" 可以看到镜像库信息。")]),e._v(" "),t("p",[e._v("也可以通过 "),t("code",[e._v("kubectl create -f")]),e._v(" 的方式搭建私有 registry，参考文档："),t("a",{attrs:{href:"https://hasura.io/blog/sharing-a-local-registry-for-minikube-37c7240d0615/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Sharing a local registry with minikube"),t("OutboundLink")],1),e._v("，yaml 文件："),t("a",{attrs:{href:"https://gist.github.com/coco98/b750b3debc6d517308596c248daf3bb1",target:"_blank",rel:"noopener noreferrer"}},[e._v("gist on github"),t("OutboundLink")],1)]),e._v(" "),t("blockquote",[t("p",[t("em",[e._v("注意：运行 "),t("code",[e._v("minikube addons enable registry")]),e._v(" 后会创建两个 pod（比如：registry-dx8jf、registry-proxy-87gm7），要保证这两个 pod 都正常运行才行，通常因为网络不通，需要改变镜像仓库（比如：先拉取 "),t("code",[e._v("registry.cn-hangzhou.aliyuncs.com/google_containers/kube-registry-proxy:0.4")]),e._v(" 再打标签 "),t("code",[e._v("gcr.io/google_containers/kube-registry-proxy:0.4")]),e._v("，然后重新启动 pod："),t("code",[e._v("kubectl get pod registry-proxy-87gm7 -n kube-system -o yaml | kubectl replace --force -f -")]),e._v("）")])])]),e._v(" "),t("h2",{attrs:{id:"推送镜像到-registry"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#推送镜像到-registry"}},[e._v("#")]),e._v(" 推送镜像到 registry")]),e._v(" "),t("p",[e._v("此时还不能在 Docker for Windows 下直接推送镜像到 registry，需要运行以下命令来将 docker vm 的5000端口与 Host 的5000端口做一个映射")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[e._v("docker run -it --name forward-registry --network"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("host alpine ash -c "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"apk add socat && socat TCP-LISTEN:5000,reuseaddr,fork TCP:host.docker.internal:5000"')]),e._v("\n")])])]),t("p",[e._v("然后就可以将镜像推送到私有的 registry 了，此时再访问 "),t("a",{attrs:{href:"http://localhost:5000/v2/_catalog",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://localhost:5000/v2/_catalog"),t("OutboundLink")],1),e._v(" 就可以看到新推送镜像的名字了。运行 "),t("code",[e._v("kubectl apply -f")]),e._v(" 也能够生成 k8s 资源。")]),e._v(" "),t("h2",{attrs:{id:"查看生成服务的链接"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查看生成服务的链接"}},[e._v("#")]),e._v(" 查看生成服务的链接")]),e._v(" "),t("p",[e._v("首先需要确定 k8s cluster 的 IP，通过运行 "),t("code",[e._v("kubectl cluster-info")]),e._v(" 得到相对应的 Host IP，再通过 "),t("code",[e._v("kubectl get svc")]),e._v(" 来查看服务对外的端口，NodePort 的话在 30000~32767，然后就可以在主机上的浏览器访问 Host IP + NodePort（比如："),t("a",{attrs:{href:"http://192.168.42.199:30021/",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://192.168.42.199:30021/"),t("OutboundLink")],1),e._v("）来查看应用了。")]),e._v(" "),t("blockquote",[t("p",[e._v("也可以直接运行 "),t("code",[e._v("minikube service [svc] --url")]),e._v(" 来获取服务在 Host 环境下的地址")])]),e._v(" "),t("h2",{attrs:{id:"其他注意事项"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#其他注意事项"}},[e._v("#")]),e._v(" 其他注意事项")]),e._v(" "),t("ol",[t("li",[e._v("在 k8s 环境中，通常以 volume pod 的形式来持久化数据，挂载磁盘时（windows），比如在 "),t("code",[e._v("D:\\~temp\\kubernetes\\kube-registry\\registry")]),e._v("，要写成 "),t("code",[e._v("/host_mnt/d/~temp/kubernetes/kube-registry/registry")]),e._v("（/host_mnt/ 表示了windows 下对于虚拟机的根的映射，但似乎不起作用。。有待研究），可以参考例子："),t("a",{attrs:{href:"./assets/kube-registry.yaml"}},[e._v("kube-registry.yaml")])])])])}),[],!1,null,null,null);r.default=s.exports}}]);