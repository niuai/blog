(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{405:function(e,l,t){"use strict";t.r(l);var c=t(45),o=Object(c.a)({},(function(){var e=this,l=e.$createElement,t=e._self._c||l;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"docker-常用命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-常用命令"}},[e._v("#")]),e._v(" Docker 常用命令")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("杀死所有正在运行的容器：")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("docker kill $(docker ps -a -q)")])])])]),e._v(" "),t("li",[t("p",[e._v("删除所有已经停止的容器：")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("docker rm $(docker ps -a -q)")])])])]),e._v(" "),t("li",[t("p",[e._v("删除所有未打 dangling 标签的镜像（中间过程无用的镜像）：")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("docker rmi $(docker images -q -f dangling=true)")])])])]),e._v(" "),t("li",[t("p",[e._v("删除所有镜像：")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("docker rmi $(docker images -q)")])])])]),e._v(" "),t("li",[t("p",[e._v("以交互方式创建容器，并在退出该交互命令窗口后容器自动销毁：")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("docker run -it --rm -p 8080:8080 -v D:\\~temp:/temp php:latest")])])])]),e._v(" "),t("li",[t("p",[e._v("将容器内的文件Copy到宿主机：")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("docker cp {contanername}:{path} {path}")]),e._v("（docker cp 容器名:要拷贝的文件在容器里面的路径 要拷贝到宿主机的相应路径）")])])])]),e._v(" "),t("h2",{attrs:{id:"kubectl-常用命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#kubectl-常用命令"}},[e._v("#")]),e._v(" Kubectl 常用命令")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("获取资源（pod、service、deployment）")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("kubectl get [xxx] -n [namespace]")])])])]),e._v(" "),t("li",[t("p",[e._v("重启某一个 pod")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("kubectl get pod [pod name] -n [namespace] -o yaml | kubectl replace --force -f -")])])])])])])}),[],!1,null,null,null);l.default=o.exports}}]);